DIFF
====

1) git diff file
    check unstaged changes
2) git diff --cached file
    check staged changes
3) git diff HEAD
    check all changes between working copy and HEAD revision in repo
    includes 1) and 2)

STATUS
======

git status -u
    shows UNtracked files in the status as well as the tracked changes

LOG
===

git log -5 --stat
    -5 limits the log to the most recent 5 commits
    --stat switches the mode to display also various details about each commit, like number of lines added etc.

REMOTE
======

git remote -v
    shows currently configured remotes (URLs)

STASHES
=======

git stash list
    to see the stack of stashes
git stash save
    to create stash [-pkuaq] [message]
git stash pop
    pops stash@{0} onto current working copy
git stash drop stash@{revision}
    may need to manyally drop a stash if a stash is created and never popped or popping resulted in conflicts


SYNC FORKED REPOSITORY WITH UPSTREAM
====================================

# Add the remote, call it "upstream":

git remote add upstream https://github.com/whoever/whatever.git

# Fetch all the branches of that remote into remote-tracking branches,
# such as upstream/master:

git fetch upstream

# Make sure that you're on your master branch:

git checkout master

# Rewrite your master branch so that any commits of yours that
# aren't already in upstream/master are replayed on top of that
# other branch:

git rebase upstream/master

# in case you get in merge trouble, resolve merge issues
#you can only continue with rebasing once merge issues have been resolved, and committed
git add .
git commit -m "whatever"
git rebase --continue

# -f may or may not be required for the final push back to the forked remote
git push -f origin master



DANGER ZONE
===========

git checkout -- .
    this will revert your local unstaged changes - effectively checks out file from your local index into working directory, any added files not be removed by this

git reset --hard HEAD
    reverts all working copy changes to the state of files in the index at HEAD

git clean -fdxn
    throw away any untracked files/directories
    ignored files (with the x switch)
    and only do a _dry run_ (list what would be deleted), if executed witout the -n option
    -f switch requried to prevent accidental cleans

git gc --prune=now
    clean up a git repository, optionally with --aggressive switch to do a more thorough job that takes longer to perform

git rm --cached -r <some_directory>
    or
git rm --cached <some_file>
    to remove files/directories accidentally added to staging area. This removes them from the staging area ONLY, leaving the files/directories untouched in the working copy

