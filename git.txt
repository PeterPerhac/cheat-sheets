DIFF
====

1) git diff file
    check unstaged changes
2) git diff --cached file
    check staged changes
3) git diff HEAD
    check all changes between working copy and HEAD revision in repo
    includes 1) and 2)


    ===================
            HEAD
    ===================
^     ^
|     |
|     git diff --cached
|     |
|     |
|   ===================
|          INDEX
|   ===================
|     ^
|     |
|     git diff
|     |
|     |
|   ===================
--      WORKING COPY
    ===================
git diff HEAD


STATUS
======

git status -u
    shows UNtracked files in the status as well as the tracked changes

LOG
===

git log -5 --stat
    -5 limits the log to the most recent 5 commits
    --stat switches the mode to display also various details about each commit, like number of lines added etc.

REMOTE
======

git remote -v
    shows currently configured remotes (URLs)

STASHES
=======

git stash list
    to see the stack of stashes
git stash save
    to create stash [-pkuaq] [message]
git stash pop
    pops stash@{0} onto current working copy
git stash drop stash@{revision}
    may need to manyally drop a stash if a stash is created and never popped or popping resulted in conflicts

git FETCH
=========
fetch will update all of the "remote tracking branches" in your local repository.

git PULL
========
a pull is effectively a fetch followed by a merge of the remote tracking branch associated with your current branch.
in case of git pull -r it's a fetch followed by a rebase rather than merge


SYNC FORKED REPOSITORY WITH UPSTREAM
====================================

# Add the remote, call it "upstream":

git remote add upstream https://github.com/whoever/whatever.git

# Fetch all the branches of that remote into remote-tracking branches,
# such as upstream/master:

git fetch upstream

# Make sure that you're on your master branch:

git checkout master

# Rewrite your master branch so that any commits of yours that
# aren't already in upstream/master are replayed on top of that
# other branch:

git rebase upstream/master

# in case you get in merge trouble, resolve merge issues
#you can only continue with rebasing once merge issues have been resolved, and committed
git add .
git commit -m "whatever"
git rebase --continue

# -f may or may not be required for the final push back to the forked remote
git push -f origin master

RENAMING BRANCHES
=================

Rename local branch you are currently on:

    git branch -m new-name

Rename any other local branch:

    git branch -m old-name new-name

Delete the old-name remote branch and push the new-name local branch.

    git push origin :old-name new-name

To reset the upstream branch for the new-name local branch, switch to the branch and then:

    git push origin -u new-name


MOVE TO FORK
============
So you've cloned somebody's repo from github, but now you want to fork it and contribute back. Never fear!
Technically, when you fork "origin" should be your fork and "upstream" should be the project you forked

1. Fork their repo on Github
2. In your local, rename your origin remote to upstream
    git remote rename origin upstream
3. Add a new origin
    git remote add origin git@github...my-fork
4. Fetch & push
    git fetch origin
    git push origin
5. Change current branch to track the branch in the new origin (not in the old origin that is now called upstream)
    git branch --set-upstream-to origin/master

(adapted from: https://gist.github.com/jagregory/710671#file-gistfile1-txt


BRANCH MANAGEMENT
=================

git branch --list
    --list all branches
git branch -d someBranchToDelete
    --delete a branch by name
git branch newBranch
    --create a new branch but don't switch to it
git checkout -b newBranch
    --create a new branch and also check it out


UNDO LAST COMMIT
================

git commit -m "Something terribly misguided"
git reset HEAD~
<< edit files as necessary >>
git add <<files>>
git commit -c ORIG_HEAD


UNDO LAST GIT AMEND
===================

git reset --soft HEAD@{1}


SQUASH COMMITS - UNPUSHED, merge last n commits
=========================

git rebase -i origin/master

    mark first as pick, rest as squash
    edit commit messages
    done

DANGER ZONE
===========

git checkout -- .
    this will revert your local unstaged changes - effectively checks out file from your local index into working directory, any added files not be removed by this
    -- dash-dash usually separates subcommand arguments (like the branch name in git checkout) from revisions or filenames.
    git checkout would work file like this: `git checkout MyFile.java` however how could we check out a file called master?
    `git checkout master` would not work. -- tells git to stop taking subcommand arguments and whatever follows are just arguments - i.e. the paths/files that git is to operate on


git reset --hard HEAD
    reverts all working copy changes to the state of files in the index at HEAD
git reset --hard HEAD^
    drops most recent commit from local repo
git clean -fdxn
    throw away any untracked files/directories
    ignored files (with the x switch)
    and only do a _dry run_ (list what would be deleted), if executed witout the -n option
    -f switch requried to prevent accidental cleans

git gc --prune=now
    clean up a git repository, optionally with --aggressive switch to do a more thorough job that takes longer to perform

execute all three commands below to aggressively shrink the size of your .git repo
git reflog expire --all --expire=now
git gc --prune=now --aggressive
git prune

git rm --cached -r <some_directory>
    or
git rm --cached <some_file>
    to remove files/directories accidentally added to staging area. This removes them from the staging area ONLY, leaving the files/directories untouched in the working copy

MULTIPLE REPOSITORIES
=====================
install the mr tool
    brew install mr
cd to your workspace
    touch .mrconfig
    ls -d */ | xargs -L1 -P4 mr register

once repositories are registered with the mr tool, you can run commands like:
    mr status
    mr update
        (performs a pull)

    etc.


BASH scripts
============

find . -type d -name .git -exec dirname {} \; -execdir git status \; -exec echo "$(tput setaf 5)-------------------------------------$(tput sgr0)" \;
    check status on all Git repositories found under current working directory
    this will also output a magenta dashed line inbetween each status report

find $WORKSPACE -type d -name "app-config-*" -maxdepth 1 -print -exec git -C {} pull -r \;
    this will git pull (rebasing any local unpushed changes) from all app-config* projects in your workspace
    before executing the git pull, name of project folder will be printed

or do the same with app-configs but with coloured output:
find $WORKSPACE -type d -path "*app-config-*/.git" -exec dirname {} \; -execdir git pull -r \; -exec echo "$(tput setaf 5)-------------------------------------$(tput sgr0)" \;



